// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i16;
import 'dart:typed_data' as _i18;

import 'package:dartz/dartz.dart' as _i2;
import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;
import 'package:weather_app/core/failure.dart' as _i9;
import 'package:weather_app/data/data_sources/list_of_cities_data_remote_source/list_of_cities_remote_data_source.dart'
    as _i15;
import 'package:weather_app/data/data_sources/weather_data_source/remote_data_source.dart'
    as _i11;
import 'package:weather_app/data/models/cities_model.dart' as _i6;
import 'package:weather_app/data/models/weather_model.dart' as _i3;
import 'package:weather_app/domain/entities/cities.dart' as _i14;
import 'package:weather_app/domain/entities/weather.dart' as _i10;
import 'package:weather_app/domain/repos/cities_repo.dart' as _i5;
import 'package:weather_app/domain/repos/weather_repo.dart' as _i4;
import 'package:weather_app/domain/usecases/get_cities.dart' as _i13;
import 'package:weather_app/domain/usecases/get_current_weather.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherModel_1 extends _i1.SmartFake implements _i3.WeatherModel {
  _FakeWeatherModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherRepo_2 extends _i1.SmartFake implements _i4.WeatherRepo {
  _FakeWeatherRepo_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCitiesRepo_3 extends _i1.SmartFake implements _i5.CitiesRepo {
  _FakeCitiesRepo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCitiesModel_4 extends _i1.SmartFake implements _i6.CitiesModel {
  _FakeCitiesModel_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_5 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i7.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepo extends _i1.Mock implements _i4.WeatherRepo {
  MockWeatherRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>> getCurrentWeather(
          String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeather,
          [cityName],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>.value(
                _FakeEither_0<_i9.Failure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #getCurrentWeather,
            [cityName],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>);
}

/// A class which mocks [WeatherRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSource extends _i1.Mock
    implements _i11.WeatherRemoteDataSource {
  MockWeatherRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.WeatherModel> getCurrentWeather(String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeather,
          [cityName],
        ),
        returnValue: _i8.Future<_i3.WeatherModel>.value(_FakeWeatherModel_1(
          this,
          Invocation.method(
            #getCurrentWeather,
            [cityName],
          ),
        )),
      ) as _i8.Future<_i3.WeatherModel>);
}

/// A class which mocks [GetCurrentWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentWeatherUseCase extends _i1.Mock
    implements _i12.GetCurrentWeatherUseCase {
  MockGetCurrentWeatherUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.WeatherRepo get weatherRepo => (super.noSuchMethod(
        Invocation.getter(#weatherRepo),
        returnValue: _FakeWeatherRepo_2(
          this,
          Invocation.getter(#weatherRepo),
        ),
      ) as _i4.WeatherRepo);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>> execute(
          String? cityName) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [cityName],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>.value(
                _FakeEither_0<_i9.Failure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #execute,
            [cityName],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>);
}

/// A class which mocks [GetCitiesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCitiesUseCase extends _i1.Mock implements _i13.GetCitiesUseCase {
  MockGetCitiesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.CitiesRepo get citiesRepo => (super.noSuchMethod(
        Invocation.getter(#citiesRepo),
        returnValue: _FakeCitiesRepo_3(
          this,
          Invocation.getter(#citiesRepo),
        ),
      ) as _i5.CitiesRepo);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i14.CitiesEntity>> execute(
          String? countryName) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [countryName],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i14.CitiesEntity>>.value(
                _FakeEither_0<_i9.Failure, _i14.CitiesEntity>(
          this,
          Invocation.method(
            #execute,
            [countryName],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i14.CitiesEntity>>);
}

/// A class which mocks [CitiesRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockCitiesRepo extends _i1.Mock implements _i5.CitiesRepo {
  MockCitiesRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i14.CitiesEntity>> getCities(
          String? countryName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCities,
          [countryName],
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i14.CitiesEntity>>.value(
                _FakeEither_0<_i9.Failure, _i14.CitiesEntity>(
          this,
          Invocation.method(
            #getCities,
            [countryName],
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i14.CitiesEntity>>);
}

/// A class which mocks [CitiesRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCitiesRemoteDataSource extends _i1.Mock
    implements _i15.CitiesRemoteDataSource {
  MockCitiesRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.CitiesModel> getCities(String? countryName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCities,
          [countryName],
        ),
        returnValue: _i8.Future<_i6.CitiesModel>.value(_FakeCitiesModel_4(
          this,
          Invocation.method(
            #getCities,
            [countryName],
          ),
        )),
      ) as _i8.Future<_i6.CitiesModel>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i7.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i7.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_5(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i18.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i18.Uint8List>.value(_i18.Uint8List(0)),
      ) as _i8.Future<_i18.Uint8List>);

  @override
  _i8.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i7.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
